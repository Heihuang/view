/*
题目：给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，
25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。
解法：
首先我们来通过一个例子理解一下这里「翻译」的过程：我们来尝试翻译「1402」。
分成两种情况：
首先我们可以把每一位单独翻译，即 
[1,4,0,2]，翻译的结果是 beac
然后我们考虑组合某些连续的两位：
[14,0,2]，翻译的结果是 oac。
[1,40,2]，这种情况是不合法的，因为 
40 不能翻译成任何字母。
[1,4,02]，这种情况也是不合法的，含有前导零的两位数不在题目规定的翻译规则中，那么 
[14,02] 显然也是不合法的。
那么我们可以归纳出翻译的规则，字符串的第 i 位置：
可以单独作为一位来翻译
如果第 i−1 位和第 i 位组成的数字在 10 到 25 之间，可以把这两位连起来翻译
到这里，我们发现它和「198. 打家劫舍」非常相似。我们可以用 f(i) 表示以第 i 位结尾的前缀串翻译的方案数，
考虑第 i 位单独翻译和与前一位连接起来再翻译对 f(i) 的贡献f(i−1)；如果第 
*/
#include <string>
using namespace std;
int translateNum(int num) {
    string src = to_string(num);
    int p = 0, q = 0, r = 1;
    for (int i = 0; i < src.size(); ++i) {
        p = q; 
        q = r; 
        r = 0;
        r += q;
        if (i == 0) {
            continue;
        }
        auto pre = src.substr(i - 1, 2);
        if (pre <= "25" && pre >= "10") {
            r += p;
        }
    }
    return r;
}